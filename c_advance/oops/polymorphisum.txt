Polymorphism in C++ is an essential concept of object-oriented programming that allows functions or methods to operate on objects of different types through a unified interface. Polymorphism is primarily achieved through two main mechanisms: compile-time (or static) polymorphism and runtime (or dynamic) polymorphism.

Types of Polymorphism in C++:

Compile-time Polymorphism: Achieved through function overloading and operator overloading.

// method overloading
// ------------------
#include <iostream>
using namespace std;
class Math{
    public:
    int sum(int a, int b){
        return a + b;
    }
    int sum(int a, int b, int c){
        return a + b + c;
    }
};
int main() {
    Math m;
    cout<<m.sum(10, 20, 30);
    return 0;
}

// operator overloading
// --------------------

#include <iostream>

class Complex {
private:
    double real;
    double imag;

public:
    Complex(double r, double i) : real(r), imag(i) {}

    // Overload the + operator
    Complex operator+(const Complex &c) {
        return Complex(real + c.real, imag + c.imag);
    }

    void display() const {
        std::cout << real << " + " << imag << "i" << std::endl;
    }
};

int main() {
    Complex c1(3.0, 4.0);
    Complex c2(1.0, 2.0);
    Complex c3 = c1 + c2;  // Uses overloaded operator+
    c3.display();
    return 0;
}



Runtime Polymorphism: Achieved through inheritance and virtual functions.

Example 1:

#include <iostream>

class Shape {
public:
    // Virtual function
    virtual void draw() {
        std::cout << "Drawing a shape" << std::endl;
    }
};

class Circle : public Shape {
public:
    void draw() override {
        std::cout << "Drawing a circle" << std::endl;
    }
};

class Square : public Shape {
public:
    void draw() override {
        std::cout << "Drawing a square" << std::endl;
    }
};

void drawShape(Shape &shape) {
    shape.draw();  // Calls the appropriate draw() function
}

int main() {
    Circle circle;
    Square square;

    drawShape(circle);  // Outputs: Drawing a circle
    drawShape(square);  // Outputs: Drawing a square

    return 0;
}


Example 2:

#include <iostream>
using namespace std;
class Test1{
    public:
    virtual void name(){
        cout << "i am from parent class"<<endl;
    }
};

class Test2: public Test1{
    public:
    void name(){
        Test1::name();
        cout << "i am from child class";
    }
};

int main() {
    Test2 t2;
    Test1 *t1 = &t2;
    t1->name();
    return 0;
}


Example 3:

#include <iostream>
using namespace std;
class Test1{
    public:
    virtual void name(){
        cout << "i am from parent class"<<endl;
    }
};

class Test2: public Test1{
    public:
    void name(){
        // Test1::name();
        cout << "i am from child class";
    }
};

int main() {
    Test2 t2;
    Test1 *t1;
    t1 = &t2;
    t1->name();
    return 0;
}



#include <iostream>
using namespace std;
class Test1{
    public:
    void name(){
        cout << "i am from parent class";
    }
};

class Test2: public Test1{
    public:
    void name(){
        cout << "i am from child class";
    }
};

int main() {
    Test2 t;
    t.name();
    return 0;
}
